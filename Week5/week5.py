# -*- coding: utf-8 -*-
"""Week5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zMkQl7-c9foQJYGX1GZ7CVxQXNg_49lx

# Exploring & Analyzing Data
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np  # linear algebra
import pandas as pd # data processing, CSV file I?O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns # data vizualisation

#to set backend of matplotlib to iniline view visual:
# %matplotlib inline

from google.colab import files
import io
uploaded = files.upload()

df = pd.read_csv('BreadBasket_DMS.csv')

#Get Distinct/Unique Value
df.Item.unique()

#Displaying Unique Item by Removing Duplicates Data in a Column
df.Item.drop_duplicates()

#dataset overview
df.head(3)

"""**Display Unique Value and Its Total Count**



"""

# to get the total count of each unique value in a column
topten = df.Item.value_counts()
topten.head(10)

"""**Drop/Remove Row from Data Frame**"""

# we can see that there's on item listed as 'NONE' and is counted 786
# let's drop/remove it first from the dataframe

df = df[df['Item'] != 'NONE']
df.info()

print("Number of unique item: ", df.Item.nunique())
len(df['Item'].unique())

"""**Split String in DataFrame**"""

#dataset overview
df.head(3)

"""**Split String and Add New Column to Data Frame**"""

# Get substring / split string in dataframe
#------------- option 1 : using index [:]
#
#--- get 'year' from Date and save to new column in dataframe df

df['Year'] = df['Date'].str[0:4]
df['Year'].head() # prieview using head()

#repeat this option to get other substring : month, day, and hour

#Lets create separate columns for parts of Date & Time - year, month, day, and hour of day
df['Year'] = df.Date.apply(lambda x: x.split('-')[0])
df['Month'] = df.Date.apply(lambda x: x.split('-')[1])
df['Day'] = df.Date.apply(lambda x: x.split('-')[2])
df['Hour'] = df.Time.apply(lambda x: x.split(':')[0])
df.head()

"""**Review Top 10 Unique Items**"""

#We,ve explore data using df.Item.value_counts() to see total count of each unique item.
#We can use it to see the Top 10 Sales from all transaction

item_sales = df.Item.value_counts()
topten = item_sales[:10]
topten

"""**Visualizing Using Chart**"""

#visualize it using chart
sns.set(style = 'whitegrid')
toptenbar = topten.plot.bar(title = 'Top 10 Sales')
toptenbar.legend(['Number of items sold'])

"""**Letâ€™s See Another Insight**"""

#Let's see ! How is coffe sold during the day!

coffeesales = df[df['Item'] == 'Coffee']
coffeesales.head(10)

"""**Other Cofee Transaction Information**"""

coffeeTime = coffeesales['Hour'].value_counts()
coffeeTime = coffeesales['Hour'].value_counts().sort_index()
coffeeTime

"""**More Visualization**"""

sns.set(style = 'whitegrid')
coffeetimebar = coffeeTime.plot.bar(title = 'Coffe Sales by Hour')
coffeetimebar.set_xlabel('Time of day')
coffeetimebar.set_ylabel('Number of coffee sold')

"""# Data Visualization

**Import Libraries and Dataset**
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# %matplotlib inline

from google.colab import files
import io
uploaded = files.upload()

weather = pd.read_csv('weatherlondon.csv')
weather

"""**Simple Pandas Graph**"""

weather.plot(y='Tmax', x='Month')
plt.show()

"""**Line Chart**"""

weather.plot.line(y = 'Tmax', x = 'Month')
plt.show()

"""**Multiple Line Plots / Mulriple Line Chart**"""

weather.plot(y=['Tmax','Tmin'], x='Month')
plt.show()

"""**Bar Chart**"""

#Bar Chart
weather.plot(kind='bar', y='Rain', x='Month')
plt.show()

"""**Horizontal Bar Chart**"""

weather.plot(kind='barh', y='Rain', x='Month')
plt.show()

"""**Pie Chart**"""

#Pie Chart
weather.plot(kind='pie',y='Sun')
plt.show()

"""**Scatterplot**"""

# scatter diagram
weather.plot(kind='scatter', x='Sun', y='Rain')
plt.show()

"""**Multiple Chart**"""

weather.plot(y=['Tmax','Tmin','Rain','Sun'], subplots=True, layout=(2,2), figsize=(10,5))
plt.show()

"""**Simply Saving Chart**"""

#saving the chart
weather.plot(kind='pie', y='Rain', legend=False)
plt.show()
plt.savefig('pie.png')